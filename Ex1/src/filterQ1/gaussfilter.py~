import math
import numpy as np

def gaussianfilter(img, sigma):
    '''Outputs the result of applying 2D-gaussian filter of of sd sigma to the image.'''
    m, n = img.shape
    kernel, _ = gauss_1d(sigma)
    L = len(kernel)
    pad = L//2
    
    #pad along x-axis
    img = np.pad(img, ((0,0), (pad,pad)),'constant')
    temp = np.zeros((m,n))
    kernel_x = np.tile(kernel, (m,1))
    #filter along x-axis
    for j in range(n):
        temp[:,j] = np.sum(img[:,j:j+L]*kernel_x,axis=1)

    #pad along y-axis       
    temp = np.pad(temp, ((pad,pad), (0,0)),'constant')
    out = np.zeros((m,n))
    kernel_y = np.tile(kernel.reshape(L,1), (1,n))
    #filter along y-axis
    for i in range(m):
        out[i,:] = np.sum(temp[i:i+L,:]*kernel_y,axis=0)
    return out


def gauss_1d(sigma):
        '''Computes the 1-d gaussian for given standard-deviation
           outputs the values over vector [-3*sigma, 3*sigma ] and also
           return x vector.'''
        PI = np.pi
        x = np.arange(-3*sigma,3*sigma + 1)
        num = np.exp(-x*x/(2*sigma*sigma))
        den = np.sqrt(2*PI)*sigma
        return num/den, x
